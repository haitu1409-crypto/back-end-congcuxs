/**
 * Database Configuration
 * C·∫•u h√¨nh k·∫øt n·ªëi MongoDB
 */

const mongoose = require('mongoose');

class Database {
    constructor() {
        this.connection = null;
    }

    async connect() {
        try {
            const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/dande_thongke';

            const options = {
                useNewUrlParser: true,
                useUnifiedTopology: true,
                maxPoolSize: 10,
                serverSelectionTimeoutMS: 5000,
                socketTimeoutMS: 45000,
                bufferCommands: false
            };

            this.connection = await mongoose.connect(mongoUri, options);

            console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
            console.log(`üìç Database: ${this.connection.connection.name}`);
            console.log(`üåê Host: ${this.connection.connection.host}:${this.connection.connection.port}`);

            // X·ª≠ l√Ω c√°c s·ª± ki·ªán connection
            mongoose.connection.on('error', (err) => {
                console.error('‚ùå L·ªói MongoDB:', err);
            });

            mongoose.connection.on('disconnected', () => {
                console.warn('‚ö†Ô∏è MongoDB ƒë√£ ng·∫Øt k·∫øt n·ªëi');
            });

            mongoose.connection.on('reconnected', () => {
                console.log('üîÑ MongoDB ƒë√£ k·∫øt n·ªëi l·∫°i');
            });

            return this.connection;
        } catch (error) {
            console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB:', error.message);
            throw error;
        }
    }

    async disconnect() {
        try {
            if (this.connection) {
                await mongoose.disconnect();
                console.log('‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi MongoDB:', error.message);
            throw error;
        }
    }

    async ping() {
        try {
            await mongoose.connection.db.admin().ping();
            return true;
        } catch (error) {
            console.error('‚ùå Kh√¥ng th·ªÉ ping MongoDB:', error.message);
            return false;
        }
    }

    getConnectionStatus() {
        const states = {
            0: 'disconnected',
            1: 'connected',
            2: 'connecting',
            3: 'disconnecting'
        };

        return {
            state: states[mongoose.connection.readyState],
            host: mongoose.connection.host,
            port: mongoose.connection.port,
            name: mongoose.connection.name
        };
    }
}

// Singleton instance
const database = new Database();

module.exports = database;
